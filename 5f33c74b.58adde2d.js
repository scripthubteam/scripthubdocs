(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{164:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return i})),a.d(n,"rightToc",(function(){return r})),a.d(n,"default",(function(){return c}));a(51),a(24),a(19),a(20),a(52),a(0);var o=a(221);function t(){return(t=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var o in a)Object.prototype.hasOwnProperty.call(a,o)&&(e[o]=a[o])}return e}).apply(this,arguments)}var i={id:"jda-3",title:"Utilizando eventos",sidebar_label:"Utilizando eventos"},r=[{value:"Introducci\xf3n",id:"introducci\xf3n",children:[]},{value:"Utilizaci\xf3n",id:"utilizaci\xf3n",children:[]},{value:"Lista de eventos",id:"lista-de-eventos",children:[{value:"Tipos de eventos",id:"tipos-de-eventos",children:[]}]},{value:"Conclusi\xf3n",id:"conclusi\xf3n",children:[]}],l={rightToc:r},s="wrapper";function c(e){var n=e.components,a=function(e,n){if(null==e)return{};var a,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)a=i[o],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,["components"]);return Object(o.b)(s,t({},l,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",t({parentName:"li"},{href:"#introducci%C3%B3n"}),"Introducci\xf3n")," - Breve explicaci\xf3n sobre qu\xe9 es un evento."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",t({parentName:"li"},{href:"#utilizaci%C3%B3n"}),"Utilizaci\xf3n")," - C\xf3mo se utiliza un evento."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",t({parentName:"li"},{href:"#lista-de-eventos"}),"Lista de eventos")," - Una lista completa con cada uno de los eventos de JDA.",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",t({parentName:"li"},{href:"#tipos-de-eventos"}),"Tipos de eventos")," - Todas los diferentes categor\xedas de los eventos de JDA."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",t({parentName:"li"},{href:"#conclusi%C3%B3n"}),"Conclusi\xf3n")," - Corto resumen de todo lo explicado en esta gu\xeda")),Object(o.b)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),Object(o.b)("p",null,"Los eventos son funciones que se utilizan para que cuando Discord env\xede una informaci\xf3n al bot, esa informaci\xf3n pueda ser manipulada por el programador o usuario que est\xe1 haciendo uso del bot."),Object(o.b)("hr",null),Object(o.b)("h2",{id:"utilizaci\xf3n"},"Utilizaci\xf3n"),Object(o.b)("p",null,"Primero, debemos crear una ",Object(o.b)("em",{parentName:"p"},"package")," para tener un mayor orden y este ser\xe1 llamado ",Object(o.b)("inlineCode",{parentName:"p"},"eventos")," (o ",Object(o.b)("em",{parentName:"p"},"events"),"), cada clase que creemos ah\xed, tendr\xe1 que empezar obligatoriamente por un:"),Object(o.b)("pre",null,Object(o.b)("code",t({parentName:"pre"},{className:"language-java"}),"package eventos; // O events\n// Aunque si est\xe1 dentro de otro package tambi\xe9n, se deber\xe1 colocar totalmente el package, es decir:\npackage algo.algo.events;\n")),Object(o.b)("p",null,"Cada uno de los eventos tiene un par\xe1metro en su funci\xf3n, que puede ser ",Object(o.b)("inlineCode",{parentName:"p"},"GuildMessageReceivedEvent")," (en el evento, en el que env\xedan un mensaje de un servidor), el nombre de esa funci\xf3n ser\xe1 lo mismo pero le quitamos al final la palabra ",Object(o.b)("em",{parentName:"p"},"Event")," y agregamos al principio un ",Object(o.b)("em",{parentName:"p"},"on"),", quedando as\xed como resultado ",Object(o.b)("inlineCode",{parentName:"p"},"onGuildMessageReceived"),", este ser\xe1 el nombre de la funci\xf3n en la cual se manejar\xe1n todos los mensajes que vengan de un servidor."),Object(o.b)("p",null,"Dentro del ",Object(o.b)("em",{parentName:"p"},"package eventos/events")," creamos una clase con un nombre descriptivo del evento, si trata de mensajes podemos colocar ",Object(o.b)("inlineCode",{parentName:"p"},"Mensajes")," (o ",Object(o.b)("em",{parentName:"p"},"Messages"),") seguido de un ",Object(o.b)("inlineCode",{parentName:"p"},"Listener")," que ser\xe1 otra clase que se debe extender por la clase, es decir, la clase que estamos creando va a ser extendida por el ",Object(o.b)("em",{parentName:"p"},"Listener"),", para eso utilizamos estas l\xedneas de c\xf3digo:"),Object(o.b)("pre",null,Object(o.b)("code",t({parentName:"pre"},{className:"language-java"}),"import net.dv8tion.jda.api.hooks.ListenerAdapter;\n\npublic class NombreDescriptivo extends ListenerAdapter {\n\n}\n")),Object(o.b)("p",null,"Solamente reemplazamos el ",Object(o.b)("em",{parentName:"p"},"NombreDescriptivo"),", probablemente por el de nuestra elecci\xf3n (",Object(o.b)("em",{parentName:"p"},"MessagesListener"),"), dentro de esta clase podemos colocar muchos eventos pero para mantener un orden, colocaremos solo uno para ser distinguido de todos los dem\xe1s."),Object(o.b)("p",null,"Como se ha escrito anteriormente, el nombre de la funci\xf3n para tener los mensajes, ser\xe1 ",Object(o.b)("inlineCode",{parentName:"p"},"onGuildMessageReceived")," y la funci\xf3n, ser\xe1 p\xfablica y no devolver\xe1 nada, esa funci\xf3n tambi\xe9n como se ha le\xeddo posteriormente, recolectar\xe1 un par\xe1metro llamado ",Object(o.b)("inlineCode",{parentName:"p"},"GuildMessageReceivedEvent")," al cual le podemos asignar cualquier nombre, por lo general, ese nombre es ",Object(o.b)("inlineCode",{parentName:"p"},"event"),", ",Object(o.b)("inlineCode",{parentName:"p"},"evento")," o simplement ",Object(o.b)("inlineCode",{parentName:"p"},"e"),". Lo anteriormente dicho ser\xeda en c\xf3digo, lo siguiente:"),Object(o.b)("pre",null,Object(o.b)("code",t({parentName:"pre"},{className:"language-java"}),"public void onGuildMessageReceived(GuildMessageReceivedEvent e) {\n\n}\n")),Object(o.b)("p",null,"El valor de la variable ",Object(o.b)("inlineCode",{parentName:"p"},"e"),", es de tipo ",Object(o.b)("inlineCode",{parentName:"p"},"GuildMessageReceivedEvent")," y este contiene muchas funciones que por ejemplo, pueden ser:\n",Object(o.b)("inlineCode",{parentName:"p"},"e.getMessage()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"e.getChannel()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"e.getAuthor()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"e.getMessageId()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"e.isWebhookMessage()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"e.getMember()")," y esas funciones devuelven otras cosas que tambi\xe9n devuelven otras cosas, como: ",Object(o.b)("inlineCode",{parentName:"p"},"e.getMessage().getContentRaw()")," que devolver\xe1 el contenido tal cual fue enviado a Discord."),Object(o.b)("p",null,"Con todo eso, podemos hacer que por cada mensaje que el bot reciba, en la consola muestre el nombre del autor, canal, servidor y su contenido. Eso lo hacemos con la siguiente l\xednea de c\xf3digo:"),Object(o.b)("pre",null,Object(o.b)("code",t({parentName:"pre"},{className:"language-java"}),'System.out.println(String.format("%s. En el servidor %s, en el canal #%s, envi\xf3: %s", e.getAuthor().getAsTag(), e.getGuild().getName(), e.getChannel().getName(), e.getMessage().getContentRaw()));\n')),Object(o.b)("p",null,"Lo que si env\xedo ",Object(o.b)("em",{parentName:"p"},'"Holaaa!"')," en el canal ",Object(o.b)("em",{parentName:"p"},"#general")," del servidor ",Object(o.b)("em",{parentName:"p"},"Script Hub"),", en la consola deber\xeda salir: ",Object(o.b)("em",{parentName:"p"},'"Deivid#0045. En el servidor Script Hub, en el canal #general, envi\xf3: Holaaa!"'),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Pero"),", falta una peque\xf1a cosa que es agregar el evento al bot para que lo detecte y pueda enviar las cosas por medio de las funciones, y para eso se utiliza una funci\xf3n del JDA o de la variable de tipo JDA que es el bot que probablemente tiene el nombre de tu bot, tambi\xe9n ",Object(o.b)("inlineCode",{parentName:"p"},"client")," o ",Object(o.b)("inlineCode",{parentName:"p"},"bot"),", la funci\xf3n se llama ",Object(o.b)("inlineCode",{parentName:"p"},"addEventListener()")," y se debe a\xf1adir en el archivo principal o ",Object(o.b)("inlineCode",{parentName:"p"},"Main"),", todo esto escrito ser\xeda:"),Object(o.b)("pre",null,Object(o.b)("code",t({parentName:"pre"},{className:"language-java"}),"import ejem.plo.events.*;\n//......\nbot.addEventListener(new MessageListener());\n")),Object(o.b)("p",null,"Uniendo cada una de las cosas dichas y a\xf1adiendo un breve comentario en cada una de las cosas, quedar\xedan las siguientes l\xedneas de c\xf3digo:"),Object(o.b)("pre",null,Object(o.b)("code",t({parentName:"pre"},{className:"language-java"}),'package ejem.plo.eventos; // O ejem.plo.events, o tambi\xe9n events solo\n\nimport net.dv8tion.jda.api.hooks.ListenerAdapter; // Importamos la clase que ser\xe1 extendida, la cual es: ListenerAdapter\n\npublic class MessageListener extends ListenerAdapter { // Definimos la clase como p\xfablica y con el nombre: MessageListener\n    public void onGuildMessageReceived(GuildMessageReceivedEvent e) { // Inicio del evento en el cual se recibir\xe1n los mensajes provenientes \xfanicamente de un servidor (Guild)\n        // Y se muestra en la consola el nombre del autor con su tag, el servidor y canal en el cual se envi\xf3 el mensaje, y el contenido del mensaje\n        System.out.println(String.format("%s. En el servidor %s, en el canal #%s, envi\xf3: %s", e.getAuthor().getAsTag(), e.getGuild().getName(), e.getChannel().getName(), e.getMessage().getContentRaw()));\n    }\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",t({parentName:"pre"},{className:"language-java"}),"//-------- En el archivo principal o Main, se debe(n) importar el/los evento(s) y justo despu\xe9s del .build():\nbot.addEventListener(new MessageListener()); // Se reemplaza la variable bot por la que se cre\xf3 al principio en el archivo principal\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"\xa1Y listo!")," Toda esta operaci\xf3n la debemos repetir por cada evento que querramos crear y/o manejar sus datos."),Object(o.b)("hr",null),Object(o.b)("h2",{id:"lista-de-eventos"},"Lista de eventos"),Object(o.b)("p",null,"Una lista de todos los eventos de JDA, ",Object(o.b)("a",t({parentName:"p"},{href:"https://github.com/DV8FromTheWorld/JDA/wiki/8%29-List-of-Events"}),"aparece aqu\xed")," aunque no est\xe1 todav\xeda para la versi\xf3n ",Object(o.b)("inlineCode",{parentName:"p"},"4.0.0_39")," de JDA y son demasiadas las que aparecen."),Object(o.b)("p",null,"Aqu\xed van los eventos m\xe1s importantes de JDA, cada uno de los eventos con el nombre de la funci\xf3n seguido del nombre del par\xe1metro y una breve descripci\xf3n:"),Object(o.b)("pre",null,Object(o.b)("code",t({parentName:"pre"},{}),'onReady (ReadyEvent) - Cuando el bot est\xe1 listo\n\nonGenericSelfUpdate (GenericSelfUpdateEvent) - Cuando se cambia alguna informaci\xf3n del bot\nonGenericUserUpdate (GenericUserUpdateEvent) - Cuando se cambia alguna informaci\xf3n de cualquier usuario\nonGenericUserPresence (GenericUserPresenceEvent) - Cuando se cambia la presencia de un usuario\nonUserTyping (UserTypingEvent) - Cuando un usuario empieza a hablar\n\nonMessageDelete (MessageDeleteEvent) - Cuando se elimina un mensaje\nonMessageEmbed (MessageEmbedEvent) - Cuando se recibe un mensaje embed\nonMessageReceived (MessageReceivedEvent) - Cuando se recibe cualquier mensaje\nonMessageUpdate (MessageUpdateEvent) - Cuando se edita un mensaje\nonMessageReactionAdd (MessageReactionAddEvent) - Cuando se reacciona a un mensaje\nonMessageReactionRemoveAll (MessageReactionRemoveAllEvent) - Cuando se quitan todas las reacciones de un mensaje\nonMessageReactionRemove (MessageReactionRemoveEvent) - Cuando quita la reacci\xf3n a un mensaje\n-- Si le agregamos un "Private" al principio de estos, son los mensajes privados\n-- Si agregmos un "Guild" al principio de esos, son los mensajes de un servidor\n\nonGuildMemberJoin (GuildMemberJoinEvent) - Cuando entra un miembro a un servidor\nonGuildMemberLeave (GuildMemberLeaveEvent) - Cuando un miembro se sale del servidor\nonGuildMemberNickChange (GuildMemberNickChangeEvent) - Cuando se cambia el apodo a un miembro\nonGuildMemberRoleAdd (GuildMemberRoleAddEvent) - Cuando se a\xf1ade un rol a un miembro\nonGuildMemberRoleRemove (GuildMemberRoleRemoveEvent) - Cuando se le quita un rol a un miembro\n\nonGenericGuildUpdate (GenericGuildUpdateEvent) - Cuando cambia cualquier par\xe1metro del servidor\n\nonGuildVoiceDeafen (GuildVoiceDeafenEvent) - Cuando se ensordece a alguien del servidor\nonGuildVoiceMute (GuildVoiceMuteEvent) - Cuando se mutea a alguien del servidor\nonGuildVoiceJoin (GuildVoiceJoinEvent) - Cuando alguien entra a un canal de voz\nonGuildVoiceLeave (GuildVoiceLeaveEvent) - Cuando alguien sale del canal de voz\n\nonTextChannelCreate (TextChannelCreateEvent) - Cuando se crea un canal de texto\nonTextChannelDelete (TextChannelDeleteEvent) - Cuando se elimina un canal de texto\nonTextChannelUpdatePermissions (TextChannelUpdatePermissionsEvent) - Cuando se actualizan los permisos de un canal de texto\nonGenericTextChannelUpdate (GenericTextChannelUpdateEvent) - Cuando se cambia cualquier otra cosa del canal de texto\n\nonVoiceChannelCreate (VoiceChannelCreateEvent) - Cuando se crea un canal de voz\nonVoiceChannelDelete (VoiceChannelDeleteEvent) - Cuando se elimina un canal de voz\nonVoiceChannelUpdatePermissions (VoiceChannelUpdatePermissionsEvent) - Cuando se actualizan los permisos de un canal de voz\nonGenericVoiceChannelUpdate (GenericVoiceChannelUpdateEvent) - Cuando se cambia cualquier otra cosa del canal de voz\n\nonCategoryCreate (CategoryCreateEvent) - Cuando se crea una categor\xeda\nonCategoryDelete (CategoryDeleteEvent) - Cuando se elimina una categor\xeda\nonCategoryUpdatePermissions (CategoryUpdatePermissionsEvent) - Cuando se actualizan los permisos de una categor\xeda\nonGenericCategoryUpdate (GenericCategoryUpdateEvent) - Cuando se cambia cualquier otra cosa de la categor\xeda\n\nonRoleCreate (RoleCreateEvent) - Cuando se crea un rol\nonRoleDelete (RoleDeleteEvent) - Cuando se elimina un rol\nonGenericRoleUpdate (GenericRoleUpdateEvent) - Cuando se cambia cualquier cosa del rol\n\nonEmoteAdded (EmoteAddedEvent) - Cuando se a\xf1ade un emoji\nonEmoteRemovedEvent (EmoteRemovedEvent) - Cuando se elimina un emoji\nonGenericEmoteUpdate (GenericEmoteUpdateEvent) - Cuando se cambia cualquier cosa del emoji\n')),Object(o.b)("h3",{id:"tipos-de-eventos"},"Tipos de eventos"),Object(o.b)("p",null,"Hay diferentes tipos de eventos, los de canales, servidores, mensajes, etc.\nPara identificar cada uno de esos, solamente miramos el principio de alguno de estos y verificamos qu\xe9 tipo de eventos es:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Generic > Abarca todo lo que sigue despu\xe9s de eso"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"User > Usuarios"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Message > Mensajes"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Guild > Servidor"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Voice > Voz"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"TextChannel > Canal de texto"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"VoiceChannel > Canal de voz"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Category > Categor\xeda"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Role > Rol"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Emote > Emoji"),".")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),Object(o.b)("p",null,"Los eventos sirven para que nosotros como programadores, manipulemos la informaci\xf3n que nos llega de Discord y la podamos representar de alguna forma o que el usuario haga otra cosa con eso.\nCreamos un ",Object(o.b)("em",{parentName:"p"},"package")," y dentro una clase con un nombre descriptivo de la informaci\xf3n que obtiene el bot y colocamos una funci\xf3n p\xfablica que no devuelve nada con el nombre del evento y que extienda a ",Object(o.b)("em",{parentName:"p"},"ListenerAdapter")," y esa funci\xf3n tiene un par\xe1metro que es el que devuelve el evento.\nA\xf1adimos en el archivo principal o ",Object(o.b)("inlineCode",{parentName:"p"},"Main"),", la funci\xf3n de la variable ",Object(o.b)("inlineCode",{parentName:"p"},"bot")," con tipo JDA, cuya funci\xf3n es llamda ",Object(o.b)("inlineCode",{parentName:"p"},"addEventListener")," que a\xf1ade el evento al bot para que env\xede todo ah\xed."))}c.isMDXComponent=!0},221:function(e,n,a){"use strict";a.d(n,"a",(function(){return l})),a.d(n,"b",(function(){return u}));var o=a(0),t=a.n(o),i=t.a.createContext({}),r=function(e){var n=t.a.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):Object.assign({},n,e)),a},l=function(e){var n=r(e.components);return t.a.createElement(i.Provider,{value:n},e.children)};var s="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},d=Object(o.forwardRef)((function(e,n){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=function(e,n){var a={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===n.indexOf(o)&&(a[o]=e[o]);return a}(e,["components","mdxType","originalType","parentName"]),d=r(a),u=o,p=d[l+"."+u]||d[u]||c[u]||i;return a?t.a.createElement(p,Object.assign({},{ref:n},s,{components:a})):t.a.createElement(p,Object.assign({},{ref:n},s))}));function u(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[s]="string"==typeof e?e:o,r[1]=l;for(var u=2;u<i;u++)r[u]=a[u];return t.a.createElement.apply(null,r)}return t.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);